

Jump to

    Confluence navigation
    Side navigation
    Page

Custom logo
Home
Templates
Create
5
Engineering
No shortcuts in this space

Engineering
Engineering Onboarding/Setup
Engineering Onboarding/Setup

Owned by Brad Holmes
Last updated: Jan 10, 2024
3 min read
Install Homebrew

 
Install VS Code
brew install visual-studio-code
Install the linter plugin:

After installing VS Code, on the command line:
code --install-extension dbaeumer.vscode-eslint

Restart VS Code
Install the jest testing plugin:

After installing VS Code, on the command line:
code --install-extension Orta.vscode-jest

Restart VS Code
Install tmux
brew install tmux

Attached is a tmux.conf file to get started. Put it in $HOME/.tmux.conf 

 
Install Docker and Node

macOS 

Brew does not appear to install Docker Compose, use the direct install

 

$> brew install --cask docker

$> brew install nvm and create ~/.nvm directory

$> nvm install 16 --default
Install gcloud CLI

$> brew install google-cloud-sdk
Authenticate with gcloud

$> gcloud auth login

$> gcloud auth application-default login  --no-launch-browser

$> gcloud config set project buoyant-apogee-247617

$> gcloud auth configure-docker

$> gcloud components install gke-gcloud-auth-plugin

$> gcloud container clusters get-credentials routefusion-3 --region=us-central1

Confirm $> gcloud container images list --repository gcr.io/buoyant-apogee-247617 shows a list of containers.
Set up SSH Key on Git

 
Create a Github Personal Access Token

    Github Settings > Developer Settings > Personal Access Tokens

    Create a PAT with read package permissions

    Copy the git pat token for setting up environment variables (as NODE_AUTH_TOKEN)

Setup Environment Variables

Add NODE_AUTH_TOKEN and GOOGLE_PROJECT to your environment variables. 

e.g. add this snippet to your ~/.bashrc or ~/.zshrc:

export NODE_AUTH_TOKEN={{git_pat_token}}
export GOOGLE_PROJECT=buoyant-apogee-247617

If you’re using iTerm2 you may need to add the following to your ~/.zshrc:
export PATH=$HOME/bin:/usr/local/bin:$PATH  #uncomment this from default zshrc setup
# docker cli
eval "$(/opt/homebrew/bin/brew shellenv)"

#nvm
export NVM_DIR="$HOME/.nvm"
[ -s "/opt/homebrew/opt/nvm/nvm.sh" ] && . "/opt/homebrew/opt/nvm/nvm.sh"  # This loads nvm
[ -s "/opt/homebrew/opt/nvm/etc/bash_completion.d/nvm" ] && . "/opt/homebrew/opt/nvm/etc/bash_completion.d/nvm"  # This loads nvm bash_completion

Create a ~/.npmrc file:
@routefusion:registry=https://npm.pkg.github.com/
//npm.pkg.github.com/:_authToken=${NODE_AUTH_TOKEN}
Get Repositories from Git

Shortcut: Clone the hub project. Then run in the hub directory.
npm run bootstrap

This will checkout all as a sibling to hub, under the routefusion directory and npm install on each of them.

Or - Manual Instructions

Start by creating a new dir on your machine to clone all these repos into (ex. ~/projects/rf/…)

    auth-app

    authentication-service

    bank-api

    beneficiary-pipeline

    dead-letters

    entity-pipeline

    external-api

    hub

    manager-app

    notification-service

    provider-api

    transfer-pipeline

for d in {auth-app,authentication-service,bank-api,beneficiary-pipeline,dead-letters,entity-pipeline,external-api,hub,manager-app,notification-service,provider-api,transfer-pipeline}; do 
  git clone git@github.com:Routefusion/"$d".git
done
Running the services:

Docker portion:

    Follow instructions from the README at 

     

    from authentication-service run npm i && npm run migrate:local

    fromhub run npm run build-containers

    from hub run npm run up

 

Seed the DB with a super admin user:

    Username: test@tester.com

    Password: passwordPassword

docker exec postgres psql -U postgres -d authentication_service -c "INSERT INTO accountable(uuid, admin, organization_id, identifier, email, first_name, last_name, password, authenticated) VALUES('fa9fd06a-f57f-4874-9e25-3eaa7a8abcb0', true, 1,'test@tester.com', 'test@tester.com', 'Test', 'Testerup', '\$2b\$10\$el8wzFmt1o4qdRfbUxq/Lu9jgyGCt06bxFLCmyMuOTYUDK6U3xPZ2', true)"

 

Shortcut to starting the services if you used ‘npm run bootstrap’ in hub earlier: npm run start-services

Some things run in docker compose via hub. Here are all the things that don't: some will need npm run migrate:local run (benficiary-pipepline, provider-api, entity-pipeline to name a few)

run npm i && npm run start (and npm run migrate:local where applicable) in the following directories and do so in the order listed here:

    dead-letters

    entity-pipeline

    beneficiary-pipeline

    transfer-pipeline

    provider-api

    bank-api

    external-api

    notification-service

    manager-app

Testing Cambridge/Corpay

Cambridge (formerly Corpay, you’ll encounter both names) is a provider we work with often so you’ll need to be set up locally to test any Cambridge-related changes.  Follow these instruction to get setup.
Making Requests/Queries:

First you need a user token to put in the header. Navigate to http://localhost:3201/get-token?user_id=fabce93a-3cca-4de2-8517-65501b787d27

Then take the token and format in following fashion for 

    Postman: g
    Screen Shot 2022-06-10 at 8.53.31 AM.png

Screen Shot 2022-06-10 at 8.53.43 AM.png
Other ENG Tools and Links

Code style guide: 

 

Repos: Github

Logging: LogDNA (request access)

Support Ticketing: 

 

Work Tickets: 

 

System/Process Diagrams: lucid.app (must request access to see ENG specific things)

API Tool: Postman (request access to ENG team)

DB Tool: TablePlus (buy your own license with Jeeves card)

RF Staging Manager- this gets updated on any merge to Main: 

 

RF Sandbox Manager- updated along with Prod and used by customers: 

 

RF Production - the main thing 

     

Add label
Related pages
Cambridge/CorPay Setup for Local Development
Cambridge/CorPay Setup for Local Development
Engineering
page-tree-iconOrganized together
Tempus Setup
Tempus Setup
Engineering
Often read together
SUP-620 - Jeeves December dedicated account statements
SUP-620 - Jeeves December dedicated account statements
Engineering
Often read together
Be the first to add a reaction
tmux.conf
document · 4 KB
# Detect SSH connection
if-shell 'test -n "$SSH_CLIENT"' {
# Changing the default prefix key
set -g prefix C-a
bind-key C-a send-prefix
} {
# Mouse mode
set -g mouse on
# Move status to the top
set -g status-position top
}
# Change the text on the right
set -g status-right "#{?window_bigger,
[#{window_offset_x}#,#{window_offset_y}] ,}\"#{=21:pane_title}\" %b/%d %H:%M"
# Popup selector for tmux sessions
bind C-j display-popup -E "\
tmux list-sessions -F '#{?session_attached,,#{session_name}}' |\
sed '/^$/d' |\
fzf --reverse --header jump-to-session --preview 'tmux capture-pane -pt {}' |\
xargs tmux switch-client -t"
# Splitting panes
# Split vertically
bind v split-window -h -c "#{pane_current_path}"
# Split horizontally
bind h split-window -v -c "#{pane_current_path}"
# Resizing panes
# Prefix key -> Alt + Arrow Key
# Windows
bind c new-window -c "#{pane_current_path}"
#set -g base-index 1
#set-window-option -g pane-base-index 1
# Navigating windows
# Prefix key -> <Number>
# Copy mode
set-window-option -g mode-keys vi
bind -T copy-mode-vi v send-keys -X begin-selection
# Integrate with VIM
# Smart pane switching with awareness of Vim splits.
# See: https://github.com/christoomey/vim-tmux-navigator
# Add true color & italics support with alacritty terminal
# if $TERM is alacritty instead of alacritty-direct
# set-option -a terminal-overrides ",alacritty:RGB"
set -g default-terminal "tmux-256color"
set-option -sa terminal-overrides ",tmux-256color:RGB"
# set-option -sa terminal-overrides ",*256col*:RGB"
# Navigating panes
# bind -n C-h select-pane -L
# bind -n C-j select-pane -D
# bind -n C-k select-pane -U
# bind -n C-l select-pane -R
# is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
# | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
# bind -n C-h if-shell "$is_vim" "send-keys C-h" "select-pane -L"
# bind -n C-j if-shell "$is_vim" "send-keys C-j" "select-pane -D"
# bind -n C-k if-shell "$is_vim" "send-keys C-k" "select-pane -U"
# bind -n C-l if-shell "$is_vim" "send-keys C-l" "select-pane -R"
# bind -n C-\\ if-shell "$is_vim" "send-keys C-\\" "select-pane -l"
# Tmux colors
#### COLOUR (Solarized dark)
# default statusbar colors
set-option -g status-style fg=yellow,bg=black # yellow and base02
# default window title colors
set-window-option -g window-status-style fg=brightblue,bg=default # base0 and
default
# set-window-option -g window-status-style dim
# active window title colors
set-window-option -g window-status-current-style fg=brightred,bg=default
# orange and default
set-window-option -g window-status-current-style bright
# pane border
set-option -g pane-border-style fg=navyblue
set-option -g pane-active-border-style fg=deepskyblue1
set-option -g pane-border-status top
set-option -g pane-border-format " [ ###P #T ] "
# message text
set-option -g message-style fg=brightred,bg=black # orange and base01
# pane number display
set-option -g display-panes-active-colour blue # blue
set-option -g display-panes-colour brightred # orange
# clock
set-window-option -g clock-mode-colour green # green
# bell
set-window-option -g window-status-bell-style fg=black,bg=red # base02, red
# iTerm2 setting
set-option -g set-titles on
set-option -g set-titles-string '#T'
# Enchancing tmux with plugins
# git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm
if "test ! -d ~/.tmux/plugins/tpm" \
"run 'git clone https://hub.fastgit.org/tmux-plugins/tpm ~/.tmux/plugins/tpm &&
~/.tmux/plugins/tpm/bin/install_plugins'"
# Install by: prefix key -> I
set -g @plugin 'tmux-plugins/tpm'
161 %
